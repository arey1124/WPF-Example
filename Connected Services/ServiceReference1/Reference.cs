//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserAuth", Namespace="http://schemas.datacontract.org/2004/07/WcfService1")]
    [System.SerializableAttribute()]
    public partial class UserAuth : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string unameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                if ((object.ReferenceEquals(this.idField, value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uname {
            get {
                return this.unameField;
            }
            set {
                if ((object.ReferenceEquals(this.unameField, value) != true)) {
                    this.unameField = value;
                    this.RaisePropertyChanged("uname");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IEmployee")]
    public interface IEmployee {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/DoWork", ReplyAction="http://tempuri.org/IEmployee/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/DoWork", ReplyAction="http://tempuri.org/IEmployee/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployees", ReplyAction="http://tempuri.org/IEmployee/getEmployeesResponse")]
        WpfApp1.ServiceReference1.UserAuth[] getEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployees", ReplyAction="http://tempuri.org/IEmployee/getEmployeesResponse")]
        System.Threading.Tasks.Task<WpfApp1.ServiceReference1.UserAuth[]> getEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployeeRowById", ReplyAction="http://tempuri.org/IEmployee/getEmployeeRowByIdResponse")]
        WpfApp1.ServiceReference1.UserAuth getEmployeeRowById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployeeRowById", ReplyAction="http://tempuri.org/IEmployee/getEmployeeRowByIdResponse")]
        System.Threading.Tasks.Task<WpfApp1.ServiceReference1.UserAuth> getEmployeeRowByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployeeNameById", ReplyAction="http://tempuri.org/IEmployee/getEmployeeNameByIdResponse")]
        string getEmployeeNameById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/getEmployeeNameById", ReplyAction="http://tempuri.org/IEmployee/getEmployeeNameByIdResponse")]
        System.Threading.Tasks.Task<string> getEmployeeNameByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/updateEmployee", ReplyAction="http://tempuri.org/IEmployee/updateEmployeeResponse")]
        bool updateEmployee(string id, string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/updateEmployee", ReplyAction="http://tempuri.org/IEmployee/updateEmployeeResponse")]
        System.Threading.Tasks.Task<bool> updateEmployeeAsync(string id, string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/deleteEmployee", ReplyAction="http://tempuri.org/IEmployee/deleteEmployeeResponse")]
        bool deleteEmployee(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/deleteEmployee", ReplyAction="http://tempuri.org/IEmployee/deleteEmployeeResponse")]
        System.Threading.Tasks.Task<bool> deleteEmployeeAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/insertEmployee", ReplyAction="http://tempuri.org/IEmployee/insertEmployeeResponse")]
        bool insertEmployee(string id, string uname, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmployee/insertEmployee", ReplyAction="http://tempuri.org/IEmployee/insertEmployeeResponse")]
        System.Threading.Tasks.Task<bool> insertEmployeeAsync(string id, string uname, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmployeeChannel : WpfApp1.ServiceReference1.IEmployee, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmployeeClient : System.ServiceModel.ClientBase<WpfApp1.ServiceReference1.IEmployee>, WpfApp1.ServiceReference1.IEmployee {
        
        public EmployeeClient() {
        }
        
        public EmployeeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmployeeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmployeeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public WpfApp1.ServiceReference1.UserAuth[] getEmployees() {
            return base.Channel.getEmployees();
        }
        
        public System.Threading.Tasks.Task<WpfApp1.ServiceReference1.UserAuth[]> getEmployeesAsync() {
            return base.Channel.getEmployeesAsync();
        }
        
        public WpfApp1.ServiceReference1.UserAuth getEmployeeRowById(string id) {
            return base.Channel.getEmployeeRowById(id);
        }
        
        public System.Threading.Tasks.Task<WpfApp1.ServiceReference1.UserAuth> getEmployeeRowByIdAsync(string id) {
            return base.Channel.getEmployeeRowByIdAsync(id);
        }
        
        public string getEmployeeNameById(string id) {
            return base.Channel.getEmployeeNameById(id);
        }
        
        public System.Threading.Tasks.Task<string> getEmployeeNameByIdAsync(string id) {
            return base.Channel.getEmployeeNameByIdAsync(id);
        }
        
        public bool updateEmployee(string id, string uname, string password) {
            return base.Channel.updateEmployee(id, uname, password);
        }
        
        public System.Threading.Tasks.Task<bool> updateEmployeeAsync(string id, string uname, string password) {
            return base.Channel.updateEmployeeAsync(id, uname, password);
        }
        
        public bool deleteEmployee(string id) {
            return base.Channel.deleteEmployee(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteEmployeeAsync(string id) {
            return base.Channel.deleteEmployeeAsync(id);
        }
        
        public bool insertEmployee(string id, string uname, string password) {
            return base.Channel.insertEmployee(id, uname, password);
        }
        
        public System.Threading.Tasks.Task<bool> insertEmployeeAsync(string id, string uname, string password) {
            return base.Channel.insertEmployeeAsync(id, uname, password);
        }
    }
}
